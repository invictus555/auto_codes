// Code generated by Kitex v0.5.2. DO NOT EDIT.

package greetingservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	greeting "github.com/invictus555/auto_codes/greeting_service_v2/kitex_gen/greeting"
)

func serviceInfo() *kitex.ServiceInfo {
	return greetingServiceServiceInfo
}

var greetingServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GreetingService"
	handlerType := (*greeting.GreetingService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SayHello": kitex.NewMethodInfo(sayHelloHandler, newGreetingServiceSayHelloArgs, newGreetingServiceSayHelloResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "greeting",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func sayHelloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*greeting.GreetingServiceSayHelloArgs)
	realResult := result.(*greeting.GreetingServiceSayHelloResult)
	success, err := handler.(greeting.GreetingService).SayHello(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGreetingServiceSayHelloArgs() interface{} {
	return greeting.NewGreetingServiceSayHelloArgs()
}

func newGreetingServiceSayHelloResult() interface{} {
	return greeting.NewGreetingServiceSayHelloResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SayHello(ctx context.Context, req *greeting.Request) (r *greeting.Response, err error) {
	var _args greeting.GreetingServiceSayHelloArgs
	_args.Req = req
	var _result greeting.GreetingServiceSayHelloResult
	if err = p.c.Call(ctx, "SayHello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
